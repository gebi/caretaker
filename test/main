#!/usr/bin/env zsh

# These parameters might disturb caretaker/bootstrap
unset -m 'GIT_*' 'XDG_*'

# Test stuff
setopt err_exit
trap "print -P '\n%N:%i: %B%F{red}Test faild!%F{default}%b'" ZERR

alias ct='ct --quiet --no-colours'

for file in test/lib/*; {
	source $file
}

# This should be run in the real repo
ct_test_documentation

function stringcmp {
	diff -u <(echo $1) <(echo $2)
}

test_pdir=$(mktemp -dt pkgdir.XXXXXX)
test_proot=$(mktemp -dt pkgroot.XXXXXX)
test_home=$(mktemp -dt pkghome.XXXXXX)
ct_repo=$1

cat << meow
test directories:
	PKG_DIR = $test_pdir
	PKG_ROOT = $test_proot
	HOME = $test_home
meow

export PATH=$PWD/bin:$PATH

cd $test_home
export HOME=$test_home

# Does not require a working package root
ct_test_checklinks

ct_setup_root 1 $test_proot

ct_test_bootstrap

echo "# ct list local"
stringcmp "caretaker" "$(ct list)"
stringcmp "caretaker" "$(ct list local)"

echo "# ct list not-installed"
stringcmp "ra\nra-bare\nrb\nrb-bare\nrc\nrc-bare" "$(ct list not-installed)"

echo "# ct list all"
stringcmp "caretaker\nra\nra-bare\nrb\nrb-bare\nrc\nrc-bare" "$(ct list all)"

echo "# ct add (no such repo)"
! ct add weltfrieden

echo "# ct add (already installed)"
! ct add caretaker

for conf_origin in 0 1; {
	echo "## GIT_USE_ORIGIN=$conf_origin"
	echo "GIT_USE_ORIGIN=$conf_origin" >> $test_home/.config/caretaker/caretaker.conf
	for repo in ra ra-bare; {
		file=${repo%-*}
		if [[ $repo == *-bare ]] {
			echo "## bare repository"
			complement=$file
		} else {
			echo "## non-bare repository"
			complement=${repo}-bare
		}
		ct_test_add $repo
		ct_test_prereqs $file
		cd $test_pdir/$repo
		ct_test_push $repo
		cd $test_pdir
		ct_test_pull_prepare $repo $file
		ct_test_pull $repo $file
		ct_test_remove $repo
	}
}

rm -rf $test_pdir $test_proot $test_home

print -P '%F{green} test passed%F{default}'
